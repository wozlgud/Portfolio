#include "I2Cdev.h"

#include "MPU6050_6Axis_MotionApps20.h"
//#include "MPU6050.h" // MotionApp을 사용할 때 파일이 포함된 경우 필요하지 않음

// I2CDEV I2CDEV_ARDUINO_WIRE 구현 시 Arduino Wire 라이브러리가 필요합니다.
// I2Cdev.h에서 사용됩니다.
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

// 클래스 기본 I2C 주소는 0x68입니다.
// 여기에 매개변수로 특정 I2C 주소를 전달할 수 있습니다.
// AD0 low = 0x68 (SparkFun 브레이크아웃 및 InvenSense 평가 보드의 경우 기본값)
// AD0 high = 0x69
MPU6050 mpu;
#define OUTPUT_READABLE_YAWPITCHROLL

// MPU control/status vars
bool dmpReady = false;  // DMP init가 성공한 경우 true로 설정됨
uint8_t mpuIntStatus;   // MPU의 실제 인터럽트 상태 바이트를 보유합니다.
uint8_t devStatus;      // 각 장치 작동 후 상태 반환(0 = 성공, !0 = 오류)
uint16_t packetSize;    // 예상 DMP 패킷 크기(기본값: 42바이트)
uint16_t fifoCount;     // 현재 FIFO에 있는 모든 바이트 수
uint8_t fifoBuffer[64];   // FIFO 저장소 버퍼

VectorFloat gravity;  
Quaternion q;      
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll 컨테이너 및 중력 벡터

uint8_t teapotPacket[14] = { '$', 0x02, 0,0, 0,0, 0,0, 0,0, 0x00, 0x00, '\r', '\n' };

volatile bool mpuInterrupt = false;     // MPU 인터럽트 핀이 high로 되었는지 여부를 나타냅니다.
void dmpDataReady() {
    mpuInterrupt = true;
}
#include <SoftwareSerial.h> 
SoftwareSerial BTSerial(10, 11); // RX | TX

int bt=8;
int x =1;
void setup() {
   
 #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        TWBR = 24; // 400kHz I2C 클럭(CPU가 8MHz인 경우 200kHz)
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

// 시리얼 통신 초기화
// (Teapot Demo 출력에 필요하기 때문에 115200이 선택되었지만, 이는 프로젝트에 따라 결정됨)
    Serial.begin(9600);
    BTSerial.begin(9600);
   // while (!Serial); // 레오나르도가 열거될 때까지 기다린 후 다른 항목이 즉시 계속됩니다.

Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();

    // 연관성을 확인하다
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    // 준비를 기다림
   
    // DMP 로드 및 구성
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

 // 여기에 최소 감도에 맞게 조정된 자이로 오프셋을 제공합니다.
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788);

    // 제대로 작동하는지 확인하십시오(그렇다면 0을 반환).
    if (devStatus == 0) {
        // DMP를 켭니다. 이제 준비가 되었습니다.
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // Arduino 인터럽트 탐지 사용
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));
        attachInterrupt(0, dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // 메인 루프() 함수가 사용해도 좋다는 것을 알 수 있도록 DMP Ready 플래그를 설정합니다.
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // 나중에 비교할 수 있도록 예상되는 DMP 패킷 크기 가져오기
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
// 오류!
// 1 = 초기 메모리 로드 실패
// 2 = DMP 구성 업데이트 실패
// (파손될 경우 일반적으로 코드는 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }

// LED 출력 구성
pinMode(bt,INPUT);

}

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop(){
  if(bt==8){
    x++;
    delay(150);
  }
  
  if((x%2)==0){
    // 프로그래밍에 실패하면, 아무 것도 시도하지 마세요.
    if(!dmpReady) return;

    // MPU 인터럽트 또는 사용 가능한 추가 패킷을 기다립니다.
    while(!mpuInterrupt && fifoCount < packetSize){
// 기타 프로그램 동작 내용
// 만약 당신이 정말로 편집증적이라면 당신은 다른 사람들 사이에서 자주 테스트할 수 있다.
// mpuInterrupt가 참인지, 맞다면, 에서 "break;"를 확인합니다.
// MPU 데이터를 즉시 처리하는 동안() 루프
}

    // 인터럽트 플래그를 재설정하고 INT_STATUS 바이트를 가져옵니다.
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    //현재 FIFO 카운트 가져오기
    fifoCount = mpu.getFIFOCount();

    // 오버플로 검사(코드가 너무 비효율적이지 않은 경우 절대 발생하지 않음)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // 깔끔하게 계속할 수 있도록 재설정
        mpu.resetFIFO();
        Serial.println(F("FIFO overflow!"));

    // 그렇지 않으면 DMP 데이터 준비 인터럽트를 확인합니다(이러한 상황이 자주 발생함)
    }
    
    else if (mpuIntStatus & 0x02){
      // 사용 가능한 데이터 길이가 정확할 때까지 기다립니다. 매우 짧은 대기입니다.
      while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

      // FIFO에서 패킷을 읽습니다.
      mpu.getFIFOBytes(fifoBuffer, packetSize);
        
// > 1 패킷이 있는 경우 여기에서 FIFO 카운트를 추적합니다.
// (인터럽트를 기다리지 않고 즉시 추가 정보를 읽을 수 있습니다.)
      fifoCount -= packetSize;

      #ifdef OUTPUT_READABLE_YAWPITCHROLL
// 오일러 각도를 도 단위로 표시
      mpu.dmpGetQuaternion(&q, fifoBuffer);
      mpu.dmpGetGravity(&gravity, &q);
      mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
      Serial.print("ypr\t");
      Serial.print(ypr[0] * 180/M_PI);
      Serial.print("\t");
      Serial.print(ypr[1] * 180/M_PI);
      Serial.print("\t");
      Serial.println(ypr[2] * 180/M_PI);
      
      if((ypr[1] * 180/M_PI)<= -25){
        BTSerial.write('1');
      }
      else if((ypr[1] * 180/M_PI)>= 25){
        BTSerial.write('2');
      }
      else if((ypr[2] * 180/M_PI)<= -25){
        BTSerial.write('3');
      }
      else if((ypr[2] * 180/M_PI)>= 20)
      {
        BTSerial.write('4');
      }
      else{
        BTSerial.write('5');
      }
                  
      #endif
    }
  }
  else{
    bt=8;
  }
} 
